var _justinmimbs$elm_arc_diagram$ArcDiagram$boolToFlag = function (bool) {
	var _p0 = bool;
	if (_p0 === true) {
		return '1';
	} else {
		return '0';
	}
};
var _justinmimbs$elm_arc_diagram$ArcDiagram$join = _elm_lang$core$String$join(' ');
var _justinmimbs$elm_arc_diagram$ArcDiagram$prefixCoord = F2(
	function (prefix, _p1) {
		var _p2 = _p1;
		return _justinmimbs$elm_arc_diagram$ArcDiagram$join(
			{
				ctor: '::',
				_0: prefix,
				_1: {
					ctor: '::',
					_0: _elm_lang$core$Basics$toString(_p2._0),
					_1: {
						ctor: '::',
						_0: _elm_lang$core$Basics$toString(_p2._1),
						_1: {ctor: '[]'}
					}
				}
			});
	});
var _justinmimbs$elm_arc_diagram$ArcDiagram$moveTo = _justinmimbs$elm_arc_diagram$ArcDiagram$prefixCoord('M');
var _justinmimbs$elm_arc_diagram$ArcDiagram$lineTo = _justinmimbs$elm_arc_diagram$ArcDiagram$prefixCoord('L');
var _justinmimbs$elm_arc_diagram$ArcDiagram$arcTo = F6(
	function (rx, ry, rotation, largeArc, clockwise, _p3) {
		var _p4 = _p3;
		return _justinmimbs$elm_arc_diagram$ArcDiagram$join(
			{
				ctor: '::',
				_0: 'A',
				_1: {
					ctor: '::',
					_0: _elm_lang$core$Basics$toString(rx),
					_1: {
						ctor: '::',
						_0: _elm_lang$core$Basics$toString(ry),
						_1: {
							ctor: '::',
							_0: _elm_lang$core$Basics$toString(rotation),
							_1: {
								ctor: '::',
								_0: _justinmimbs$elm_arc_diagram$ArcDiagram$boolToFlag(largeArc),
								_1: {
									ctor: '::',
									_0: _justinmimbs$elm_arc_diagram$ArcDiagram$boolToFlag(clockwise),
									_1: {
										ctor: '::',
										_0: _elm_lang$core$Basics$toString(_p4._0),
										_1: {
											ctor: '::',
											_0: _elm_lang$core$Basics$toString(_p4._1),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				}
			});
	});
var _justinmimbs$elm_arc_diagram$ArcDiagram$circularArcTo = function (r) {
	return A3(_justinmimbs$elm_arc_diagram$ArcDiagram$arcTo, r, r, 0);
};
var _justinmimbs$elm_arc_diagram$ArcDiagram$rectBottomRight = function (_p5) {
	var _p6 = _p5;
	return {ctor: '_Tuple2', _0: _p6.x + _p6.width, _1: _p6.y + _p6.height};
};
var _justinmimbs$elm_arc_diagram$ArcDiagram$rectBottomLeft = function (_p7) {
	var _p8 = _p7;
	return {ctor: '_Tuple2', _0: _p8.x, _1: _p8.y + _p8.height};
};
var _justinmimbs$elm_arc_diagram$ArcDiagram$rectTopRight = function (_p9) {
	var _p10 = _p9;
	return {ctor: '_Tuple2', _0: _p10.x + _p10.width, _1: _p10.y};
};
var _justinmimbs$elm_arc_diagram$ArcDiagram$addCoord = F2(
	function (_p12, _p11) {
		var _p13 = _p12;
		var _p14 = _p11;
		return {ctor: '_Tuple2', _0: _p13._0 + _p14._0, _1: _p13._1 + _p14._1};
	});
var _justinmimbs$elm_arc_diagram$ArcDiagram$origin = {ctor: '_Tuple2', _0: 0, _1: 0};
var _justinmimbs$elm_arc_diagram$ArcDiagram$translate = F2(
	function (x, y) {
		return A2(
			_elm_lang$core$Basics_ops['++'],
			'translate(',
			A2(
				_elm_lang$core$Basics_ops['++'],
				_elm_lang$core$Basics$toString(x),
				A2(
					_elm_lang$core$Basics_ops['++'],
					', ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$toString(y),
						')'))));
	});
var _justinmimbs$elm_arc_diagram$ArcDiagram$px = function (n) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		_elm_lang$core$Basics$toString(n),
		'px');
};
var _justinmimbs$elm_arc_diagram$ArcDiagram$pathOrthoConnector = F3(
	function (radius, _p16, _p15) {
		var _p17 = _p16;
		var _p22 = _p17._1;
		var _p21 = _p17._0;
		var _p18 = _p15;
		var _p20 = _p18._1;
		var _p19 = _p18._0;
		var height = _elm_lang$core$Basics$abs(_p20 - _p22);
		var width = _elm_lang$core$Basics$abs(_p19 - _p21);
		var r = A2(
			_elm_lang$core$Basics$min,
			radius,
			A2(_elm_lang$core$Basics$min, width, height));
		return _justinmimbs$elm_arc_diagram$ArcDiagram$join(
			{
				ctor: '::',
				_0: _justinmimbs$elm_arc_diagram$ArcDiagram$moveTo(
					{ctor: '_Tuple2', _0: _p21, _1: _p22}),
				_1: {
					ctor: '::',
					_0: _justinmimbs$elm_arc_diagram$ArcDiagram$lineTo(
						{ctor: '_Tuple2', _0: _p21, _1: _p20 - r}),
					_1: {
						ctor: '::',
						_0: A4(
							_justinmimbs$elm_arc_diagram$ArcDiagram$circularArcTo,
							r,
							false,
							false,
							{ctor: '_Tuple2', _0: _p21 + r, _1: _p20}),
						_1: {
							ctor: '::',
							_0: _justinmimbs$elm_arc_diagram$ArcDiagram$lineTo(
								{ctor: '_Tuple2', _0: _p19, _1: _p20}),
							_1: {ctor: '[]'}
						}
					}
				}
			});
	});
var _justinmimbs$elm_arc_diagram$ArcDiagram$viewOrthoConnector = F4(
	function (color, radius, from, to) {
		return A2(
			_elm_lang$svg$Svg$path,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$stroke(color),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill('transparent'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$d(
							A3(_justinmimbs$elm_arc_diagram$ArcDiagram$pathOrthoConnector, radius, from, to)),
						_1: {ctor: '[]'}
					}
				}
			},
			{ctor: '[]'});
	});
var _justinmimbs$elm_arc_diagram$ArcDiagram$listTopNodes = F2(
	function (rankedNodes, orderedNodes) {
		return _elm_lang$core$List$reverse(
			_elm_lang$core$Tuple$first(
				A3(
					_elm_lang$core$List$foldl,
					F2(
						function (n, _p23) {
							var _p24 = _p23;
							var _p26 = _p24._1;
							var _p25 = _p24._0;
							var nRank = A2(
								_elm_lang$core$Maybe$withDefault,
								0,
								A2(_elm_lang$core$Dict$get, n, rankedNodes));
							return _elm_lang$core$Native_Utils.eq(nRank, _p26) ? {ctor: '_Tuple2', _0: _p25, _1: _p26} : {
								ctor: '_Tuple2',
								_0: {ctor: '::', _0: n, _1: _p25},
								_1: nRank
							};
						}),
					{
						ctor: '_Tuple2',
						_0: {ctor: '[]'},
						_1: -1
					},
					orderedNodes)));
	});
var _justinmimbs$elm_arc_diagram$ArcDiagram$layoutEdges = F3(
	function (layout, toRect, orderedEdges) {
		var edgeToConnectionOrdinals = _elm_lang$core$Tuple$first(
			A3(
				_elm_lang$core$List$foldl,
				F2(
					function (_p28, _p27) {
						var _p29 = _p28;
						var _p34 = _p29._1;
						var _p33 = _p29._0;
						var _p30 = _p27;
						var _p32 = _p30._1._0;
						var _p31 = _p30._1._1;
						var bInOrdinal = A2(
							_elm_lang$core$Maybe$withDefault,
							0,
							A2(_elm_lang$core$Dict$get, _p34, _p31));
						var aOutOrdinal = A2(
							_elm_lang$core$Maybe$withDefault,
							0,
							A2(_elm_lang$core$Dict$get, _p33, _p32));
						return {
							ctor: '_Tuple2',
							_0: A3(
								_elm_lang$core$Dict$insert,
								{ctor: '_Tuple2', _0: _p33, _1: _p34},
								{ctor: '_Tuple2', _0: aOutOrdinal, _1: bInOrdinal},
								_p30._0),
							_1: {
								ctor: '_Tuple2',
								_0: A3(_elm_lang$core$Dict$insert, _p33, aOutOrdinal + 1, _p32),
								_1: A3(_elm_lang$core$Dict$insert, _p34, bInOrdinal + 1, _p31)
							}
						};
					}),
				{
					ctor: '_Tuple2',
					_0: _elm_lang$core$Dict$empty,
					_1: {ctor: '_Tuple2', _0: _elm_lang$core$Dict$empty, _1: _elm_lang$core$Dict$empty}
				},
				orderedEdges));
		var connectionShift = function (ordinal) {
			return (ordinal * layout.edgeSpacing) + layout.nodePadding;
		};
		return A2(
			_elm_lang$core$Dict$map,
			F2(
				function (_p36, _p35) {
					var _p37 = _p36;
					var _p38 = _p35;
					return {
						ctor: '_Tuple2',
						_0: A2(
							_justinmimbs$elm_arc_diagram$ArcDiagram$addCoord,
							{
								ctor: '_Tuple2',
								_0: _elm_lang$core$Basics$negate(
									connectionShift(_p38._0)),
								_1: 0
							},
							_justinmimbs$elm_arc_diagram$ArcDiagram$rectBottomRight(
								toRect(_p37._0))),
						_1: A2(
							_justinmimbs$elm_arc_diagram$ArcDiagram$addCoord,
							{
								ctor: '_Tuple2',
								_0: 0,
								_1: _elm_lang$core$Basics$negate(
									connectionShift(_p38._1))
							},
							_justinmimbs$elm_arc_diagram$ArcDiagram$rectBottomLeft(
								toRect(_p37._1)))
					};
				}),
			edgeToConnectionOrdinals);
	});
var _justinmimbs$elm_arc_diagram$ArcDiagram$centeringOffset = F2(
	function (outer, inner) {
		return A2(_elm_lang$core$Basics$max, 0, ((outer - inner) / 2) | 0);
	});
var _justinmimbs$elm_arc_diagram$ArcDiagram$viewNode = F4(
	function (layout, paint, toRect, n) {
		var nRect = toRect(n);
		var yOffset = A2(_justinmimbs$elm_arc_diagram$ArcDiagram$centeringOffset, layout.labelMinHeight, nRect.height);
		return A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$transform(
					A2(_justinmimbs$elm_arc_diagram$ArcDiagram$translate, nRect.x, nRect.y)),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$rect,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$width(
							_justinmimbs$elm_arc_diagram$ArcDiagram$px(nRect.width)),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$height(
								_justinmimbs$elm_arc_diagram$ArcDiagram$px(nRect.height)),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill(
									paint.colorNode(n)),
								_1: {ctor: '[]'}
							}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$g,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$transform(
								A2(_justinmimbs$elm_arc_diagram$ArcDiagram$translate, nRect.width, ((nRect.height / 2) | 0) + 2)),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: paint.viewLabel(n),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$rect,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$y(
									_justinmimbs$elm_arc_diagram$ArcDiagram$px(
										_elm_lang$core$Basics$negate(yOffset))),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$width(
										_justinmimbs$elm_arc_diagram$ArcDiagram$px(nRect.width + layout.labelWidth)),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$height(
											_justinmimbs$elm_arc_diagram$ArcDiagram$px(
												A2(_elm_lang$core$Basics$max, layout.labelMinHeight, nRect.height))),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fill('transparent'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Events$onClick(n),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}
				}
			});
	});
var _justinmimbs$elm_arc_diagram$ArcDiagram$lookup = F2(
	function ($default, dict) {
		return function (_p39) {
			return A2(
				_elm_lang$core$Maybe$withDefault,
				$default,
				A3(_elm_lang$core$Basics$flip, _elm_lang$core$Dict$get, dict, _p39));
		};
	});
var _justinmimbs$elm_arc_diagram$ArcDiagram$sortEdges = F2(
	function (orderedNodes, edges) {
		var ordinalFromNode = A2(
			_justinmimbs$elm_arc_diagram$ArcDiagram$lookup,
			-1,
			_elm_lang$core$Dict$fromList(
				A2(
					_elm_lang$core$List$indexedMap,
					_elm_lang$core$Basics$flip(
						F2(
							function (v0, v1) {
								return {ctor: '_Tuple2', _0: v0, _1: v1};
							})),
					orderedNodes)));
		return A2(
			_elm_lang$core$List$sortBy,
			function (_p40) {
				var _p41 = _p40;
				return {
					ctor: '_Tuple2',
					_0: ordinalFromNode(_p41._0),
					_1: ordinalFromNode(_p41._1)
				};
			},
			_elm_lang$core$Set$toList(edges));
	});
var _justinmimbs$elm_arc_diagram$ArcDiagram$viewLabel = function (string) {
	return A2(
		_elm_lang$svg$Svg$text_,
		{
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$x('4px'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fontFamily('Helvetica, Arial, san-serif'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fontSize('12px'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$dominantBaseline('middle'),
						_1: {ctor: '[]'}
					}
				}
			}
		},
		{
			ctor: '::',
			_0: _elm_lang$svg$Svg$text(string),
			_1: {ctor: '[]'}
		});
};
var _justinmimbs$elm_arc_diagram$ArcDiagram$defaultPaint = {
	viewLabel: function (_p42) {
		return _justinmimbs$elm_arc_diagram$ArcDiagram$viewLabel(
			_elm_lang$core$Basics$toString(_p42));
	},
	colorNode: _elm_lang$core$Basics$always('black'),
	colorEdge: _elm_lang$core$Basics$always('rgba(0, 0, 0, 0.4)')
};
var _justinmimbs$elm_arc_diagram$ArcDiagram$basicPaint = function (toLabel) {
	return _elm_lang$core$Native_Utils.update(
		_justinmimbs$elm_arc_diagram$ArcDiagram$defaultPaint,
		{
			viewLabel: function (_p43) {
				return _justinmimbs$elm_arc_diagram$ArcDiagram$viewLabel(
					toLabel(_p43));
			}
		});
};
var _justinmimbs$elm_arc_diagram$ArcDiagram$defaultLayout = {nodePadding: 4, edgeSpacing: 2, edgeRadius: 4, labelWidth: 100, labelMinHeight: 20};
var _justinmimbs$elm_arc_diagram$ArcDiagram$Layout = F5(
	function (a, b, c, d, e) {
		return {nodePadding: a, edgeSpacing: b, edgeRadius: c, labelWidth: d, labelMinHeight: e};
	});
var _justinmimbs$elm_arc_diagram$ArcDiagram$Paint = F3(
	function (a, b, c) {
		return {viewLabel: a, colorNode: b, colorEdge: c};
	});
var _justinmimbs$elm_arc_diagram$ArcDiagram$Rect = F4(
	function (a, b, c, d) {
		return {x: a, y: b, width: c, height: d};
	});
var _justinmimbs$elm_arc_diagram$ArcDiagram$layoutNodes = F4(
	function (_p44, incoming, outgoing, orderedNodes) {
		var _p45 = _p44;
		var _p52 = _p45.nodePadding;
		var _p51 = _p45.labelMinHeight;
		var _p50 = _p45.edgeSpacing;
		return _elm_lang$core$Tuple$second(
			A3(
				_elm_lang$core$List$foldl,
				F2(
					function (n, _p46) {
						var _p47 = _p46;
						var _p49 = _p47._0._1;
						var _p48 = _p47._0._0;
						var outdegree = A2(_justinmimbs$elm_arc_diagram$Digraph$degree, n, outgoing);
						var width = (outdegree * _p50) + (_p52 * 2);
						var indegree = A2(_justinmimbs$elm_arc_diagram$Digraph$degree, n, incoming);
						var height = (indegree * _p50) + (_p52 * 2);
						var yOffset = A2(_justinmimbs$elm_arc_diagram$ArcDiagram$centeringOffset, _p51, height);
						var rect = A4(_justinmimbs$elm_arc_diagram$ArcDiagram$Rect, _p48, _p49 + yOffset, width, height);
						return {
							ctor: '_Tuple2',
							_0: {
								ctor: '_Tuple2',
								_0: _p48 + rect.width,
								_1: _p49 + A2(_elm_lang$core$Basics$max, _p51, rect.height)
							},
							_1: A3(_elm_lang$core$Dict$insert, n, rect, _p47._1)
						};
					}),
				{
					ctor: '_Tuple2',
					_0: {ctor: '_Tuple2', _0: 0, _1: 0},
					_1: _elm_lang$core$Dict$empty
				},
				orderedNodes));
	});
var _justinmimbs$elm_arc_diagram$ArcDiagram$emptyRect = A4(_justinmimbs$elm_arc_diagram$ArcDiagram$Rect, 0, 0, 0, 0);
var _justinmimbs$elm_arc_diagram$ArcDiagram$calculateTotalSize = F3(
	function (_p53, orderedNodes, rectFromNode) {
		var _p54 = _p53;
		var lastRect = A2(
			_elm_lang$core$Maybe$withDefault,
			_justinmimbs$elm_arc_diagram$ArcDiagram$emptyRect,
			A2(
				_elm_lang$core$Maybe$map,
				rectFromNode,
				_elm_lang$core$List$head(
					_elm_lang$core$List$reverse(orderedNodes))));
		return A2(
			_justinmimbs$elm_arc_diagram$ArcDiagram$addCoord,
			_justinmimbs$elm_arc_diagram$ArcDiagram$rectTopRight(lastRect),
			{
				ctor: '_Tuple2',
				_0: _p54.labelWidth,
				_1: A2(_elm_lang$core$Basics$max, _p54.labelMinHeight, lastRect.height)
			});
	});
var _justinmimbs$elm_arc_diagram$ArcDiagram$view = F3(
	function (layout, paint, graph) {
		var rankedNodes = _justinmimbs$elm_arc_diagram$AcyclicDigraph$topologicalRank(graph);
		var edges = _justinmimbs$elm_arc_diagram$AcyclicDigraph$toEdges(graph);
		var outgoing = _justinmimbs$elm_arc_diagram$Digraph$toAdjacencyList(edges);
		var incoming = _justinmimbs$elm_arc_diagram$Digraph$transpose(outgoing);
		var orderedNodes = A2(
			_justinmimbs$elm_arc_diagram$AcyclicDigraph$topologicalSortBy,
			function (n) {
				return {
					ctor: '_Tuple2',
					_0: A2(_justinmimbs$elm_arc_diagram$Digraph$degree, n, incoming),
					_1: _elm_lang$core$Basics$negate(
						A2(_justinmimbs$elm_arc_diagram$Digraph$degree, n, outgoing))
				};
			},
			rankedNodes);
		var nodeToRect = A4(_justinmimbs$elm_arc_diagram$ArcDiagram$layoutNodes, layout, incoming, outgoing, orderedNodes);
		var rectFromNode = A2(_justinmimbs$elm_arc_diagram$ArcDiagram$lookup, _justinmimbs$elm_arc_diagram$ArcDiagram$emptyRect, nodeToRect);
		var _p55 = A3(_justinmimbs$elm_arc_diagram$ArcDiagram$calculateTotalSize, layout, orderedNodes, rectFromNode);
		var w = _p55._0;
		var h = _p55._1;
		var orderedEdges = A2(_justinmimbs$elm_arc_diagram$ArcDiagram$sortEdges, orderedNodes, edges);
		var edgeToEndpoints = A3(_justinmimbs$elm_arc_diagram$ArcDiagram$layoutEdges, layout, rectFromNode, orderedEdges);
		return A2(
			_elm_lang$svg$Svg$svg,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$width(
					_justinmimbs$elm_arc_diagram$ArcDiagram$px(w)),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$height(
						_justinmimbs$elm_arc_diagram$ArcDiagram$px(h)),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$style('cursor: default;'),
						_1: {ctor: '[]'}
					}
				}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$g,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$transform('translate(-0.5, 0.5)'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$strokeLinecap('square'),
							_1: {ctor: '[]'}
						}
					},
					A2(
						_elm_lang$core$List$map,
						function (edge) {
							var _p56 = A2(
								_elm_lang$core$Maybe$withDefault,
								{ctor: '_Tuple2', _0: _justinmimbs$elm_arc_diagram$ArcDiagram$origin, _1: _justinmimbs$elm_arc_diagram$ArcDiagram$origin},
								A2(_elm_lang$core$Dict$get, edge, edgeToEndpoints));
							var from = _p56._0;
							var to = _p56._1;
							return A4(
								_justinmimbs$elm_arc_diagram$ArcDiagram$viewOrthoConnector,
								paint.colorEdge(edge),
								layout.edgeRadius,
								from,
								to);
						},
						orderedEdges)),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$g,
						{ctor: '[]'},
						A2(
							_elm_lang$core$List$map,
							A3(_justinmimbs$elm_arc_diagram$ArcDiagram$viewNode, layout, paint, rectFromNode),
							orderedNodes)),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$g,
							{ctor: '[]'},
							A2(
								_elm_lang$core$List$map,
								function (n) {
									var nRect = rectFromNode(n);
									var yOffset = A2(_justinmimbs$elm_arc_diagram$ArcDiagram$centeringOffset, layout.labelMinHeight, nRect.height);
									return A2(
										_elm_lang$svg$Svg$rect,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fill('rgba(0, 0, 0, 0.2)'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$x(
													_justinmimbs$elm_arc_diagram$ArcDiagram$px(nRect.x + nRect.width)),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$y(
														_justinmimbs$elm_arc_diagram$ArcDiagram$px(nRect.y - yOffset)),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$width(
															_justinmimbs$elm_arc_diagram$ArcDiagram$px(layout.labelWidth)),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$height('1px'),
															_1: {ctor: '[]'}
														}
													}
												}
											}
										},
										{ctor: '[]'});
								},
								A2(_justinmimbs$elm_arc_diagram$ArcDiagram$listTopNodes, rankedNodes, orderedNodes))),
						_1: {ctor: '[]'}
					}
				}
			});
	});
